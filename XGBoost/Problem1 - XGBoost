import xgboost as xgb
import pandas as pd
import matplotlib.pyplot as plt
from CatFunc import categorize_congestion
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler

df = pd.read_csv('/Users/daddy/Downloads/Banglore_traffic_Dataset.csv')
print(df.head())

df['CongestionCategory'] = df['Congestion Level'].apply(categorize_congestion)
le_weather = LabelEncoder()
df['Weather_Encoded'] = le_weather.fit_transform(df['Weather Conditions'])

X = df[['Traffic Volume', 'Average Speed', 'Travel Time Index', 'Road Capacity Utilization', 'Incident Reports', 'Public Transport Usage', 
'Traffic Signal Compliance', 'Parking Usage', 'Pedestrian and Cyclist Count', 'Weather_Encoded']]
y = df['CongestionCategory']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

le_target = LabelEncoder()
y_fit = le_target.fit_transform(y_train)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = xgb.XGBClassifier(eta=0.0094,
                          n_estimators=200,
                          max_depth=6,
                          use_label_encoder=False,
                          eval_metric='mlogloss')


model.fit(X_train, y_fit)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

xgb.plot_importance(model, importance_type='gain')
plt.show()
